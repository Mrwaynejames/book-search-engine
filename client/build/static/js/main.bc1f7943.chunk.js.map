{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","SAVE_BOOK","REMOVE_BOOK","ADD_USER","i","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","error","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","input","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","removeBook","userData","me","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","login","addUser","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","currentTarget","checkValidity","stopPropagation","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc1f7943.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\nmutation loginUser($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n  `;\n\n  export const SAVE_BOOK = gql`\n  mutation saveBook($input: savedBook!) {\n    saveBook(input: $input) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        # _id\n        bookId\n        authors\n        image\n        link\n        title\n        description\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: ID!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        # _id\n        bookId\n        authors\n        image\n        link\n        title\n        description\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\nmutation createUser(username:String!, email:String!, password: String!) {\n  createUser(username:String!, email:String!, password: String!) {\n    User {\n      _id\n      username\n    }\n  }\n}`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { SAVE_BOOK } from '../utils/mutations';\nimport {useMutation} from '@apollo/react-hooks';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, {error}] = useMutation(SAVE_BOOK );\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('somethings wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {data} = await savedBookIds({\n        variables: {input:bookToSave }\n      })\n\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`{\n    me {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n          # _id\n          bookId\n          authors\n          image\n          link\n          title\n          description\n        }\n      }\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport {useMutation, useQuery} from '@apollo/react-hooks';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || [];\n\n  const handleDeleteBook = async (bookId) => {\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) { return false; }\n\n    try {\n      const {data} = await removeBook({\n        variables: { bookId }\n      });\n\n      removeBookId(bookId);\n    } catch (err) { console.error(err);}\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\nconst [createUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData}\n      });\n\n      Auth.login(data.addUser.token)\n\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from \"../utils/auth\";\n\n\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const[loginUser, {error}] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n \n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData}\n      });\n\n      Auth.login(data.login.token)\n\n    } catch (e) {\n      console.error(e);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}